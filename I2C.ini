// Simulation of I2C Memory (Slave)

MAP 0x2000FF00, 0x2000FFFF READ WRITE        // Map User Memory region

//DEFINE int SADR                              // Slave Address

signal void I2CMEMORY (unsigned char SADR) {
	unsigned long adr;

	adr = 0x2000FF00;
	while (1) {
		wwatch (I2C1_OUT);                         // Wait for data from Microcontroller
		while (I2C1_OUT == 0x0100) {               // START detected
			printf("start comfirmed!\n");
			wwatch (I2C1_OUT);                     // Wait for data from Microcontroller
			if (I2C1_OUT > 0xFF) continue;
			if ((I2C1_OUT >> 1) != SADR) {			// test if Slave is addressed
				printf("%#x\n", I2C1_OUT);
				printf("EEPROM is not addressed!\n");
				continue;  
			}
			printf("EEPROM is addressed\n");
			I2C1_IN = 0xFF00;                       // ACK to Microcontroller
			if (I2C1_OUT & 1) {                     // Slave Read
				while (1) {
					printf("%#lx\n",adr);
					I2C1_IN = _RBYTE(adr);             	// Read Byte from Memory
					adr++;                             	// Increment Address
					wwatch (I2C1_OUT);                 	// Wait for ACK from Microcontroller
					if (I2C1_OUT == 0xFF01) {
						printf("Read end & Master NACK\n");
						break;
					}
				}
			}
			else {                                 // Slave Write
				wwatch (I2C1_OUT);                    // Wait for data from Microcontroller
				if (I2C1_OUT > 0xFF) continue;
				adr = I2C1_OUT + 0x2000FF00;          // Set Memory Address
				I2C1_IN = 0xFF00;                     // ACK to Microcontroller
				while (1) {
					wwatch (I2C1_OUT);                  // Wait for data from Microcontroller
					if (I2C1_OUT == 0xFFFF) {
						printf("stop comfirmed\n");
						break;
					}
					if (I2C1_OUT == 0x0100) {
						printf("re-start confirmed\n");
						break;
					}
					_WBYTE (adr, I2C1_OUT);             // Store Byte in Memory
					adr++;                             // Increment Address
					I2C1_IN = 0xFF00;                   // ACK to Microcontroller
				}
			}
		}
	}
}

//use I2C1 as a master device & I2C2 as slave device
//Allow you to test STM32F103RCT6's normal I2C function just within one MCU
signal void I2CVirtualBus(unsigned char SADR) {
	while(1) {
		wwatch(I2C1_OUT);						//wait for data from master
		while (I2C1_OUT == 0x0100) {
			printf("start comfirmed!\n");
			I2C2_IN = I2C1_OUT;
			wwatch(I2C1_OUT);					//wait for address
			printf("%#hx\n", I2C1_OUT);
			I2C2_IN = I2C1_OUT;
			if ((I2C1_OUT >> 1) != SADR) {		//if it's not the specified address
				printf("slave is not addressed\n");
				break;							//slave wouldn't ACK
			}
			wwatch(I2C2_OUT);					//wait for slave ACK
			printf("%#hx\n", I2C2_OUT);
			I2C1_IN = I2C2_OUT;					//slave should ACk
			if (I2C1_OUT & 1) {					//master read data
				printf("Master read data from slave\n");
				while (1) {
					wwatch(I2C2_OUT);			//wait for slave's data
					I2C1_IN = I2C2_OUT;			//send data
					wwatch(I2C1_OUT);			//wait Master ACK/NACK
					I2C2_IN = I2C1_OUT;
					if (I2C1_OUT == 0xFF01)	{	//master NACK
						printf("Master NACK\n");
						break;
					}
				}
				wwatch(I2C1_OUT);				//wait for STOP
				I2C2_IN = I2C1_OUT;
				if(I2C1_OUT == 0xFFFF)
					printf("STOP comfirmed\n");	
			}
			else {
				printf("Master wirte data to slave\n");
				while(1) {
					wwatch(I2C1_OUT);			//wait for data from master
					I2C2_IN = I2C1_OUT;
					if(I2C1_OUT == 0xFFFF) {
						printf("STOP comfirmed\n");
						break;
					}
					wwatch(I2C2_OUT);			//wait for slave ACK/NACK
					I2C1_IN = I2C2_OUT;
				}
			}
		}
	}
}
